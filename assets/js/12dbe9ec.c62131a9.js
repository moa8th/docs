"use strict";(self.webpackChunkturbowarp_docs=self.webpackChunkturbowarp_docs||[]).push([[566],{9473:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>c,contentTitle:()=>p,metadata:()=>u,toc:()=>d,ExampleExtensionLink:()=>m,default:()=>k});var a=n(3117),o=n(102),s=(n(7294),n(3905)),i=n(9055),l=n(2263);const r=["components"],c={slug:"/development/custom-extensions",hide_table_of_contents:!0,sidebar_label:"Custom Extensions"},p="Custom Extensions for Developers",u={unversionedId:"development/custom-extensions",id:"development/custom-extensions",title:"Custom Extensions for Developers",description:"const  = useDocusaurusContext();",source:"@site/docs/development/custom-extensions.mdx",sourceDirName:"development",slug:"/development/custom-extensions",permalink:"/development/custom-extensions",editUrl:"https://github.com/TurboWarp/docs/edit/master/docs/development/custom-extensions.mdx",tags:[],version:"current",frontMatter:{slug:"/development/custom-extensions",hide_table_of_contents:!0,sidebar_label:"Custom Extensions"},sidebar:"development",previous:{title:"Getting Started",permalink:"/development/getting-started"},next:{title:"Globals",permalink:"/development/globals"}},d=[{value:"Introduction to writing custom extensions",id:"introduction",children:[],level:2},{value:"Hello, world!",id:"hello-world",children:[],level:2},{value:"getInfo",id:"getInfo",children:[],level:2},{value:"A more complex example",id:"strict-equality",children:[{value:"Debugging",id:"debugging",children:[],level:3},{value:"Sandbox",id:"sandbox",children:[],level:3},{value:"Backwards Compatibility",id:"backwards-compatibility",children:[],level:3},{value:"Differences compared to Scratch",id:"scratch-changes",children:[],level:3},{value:"Additional resources",id:"resources",children:[],level:3}],level:2}],m=e=>{let{name:t}=e;const{siteConfig:n}=(0,l.Z)(),a="https://turbowarp.org/editor?extension="+("undefined"!=typeof location?location.origin:n.url)+"/example-extensions/"+t;return(0,s.kt)("p",null,(0,s.kt)("a",{href:a},"Test this example here.")," (Do not use this link to make real projects!)")},h={toc:d,ExampleExtensionLink:m};function k(e){let{components:t}=e,l=(0,o.Z)(e,r);return(0,s.kt)("wrapper",(0,a.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"custom-extensions-for-developers"},"Custom Extensions for Developers"),(0,s.kt)("p",null,"TurboWarp supports experimental sandboxed extensions specified via URL parameter, for example: ",(0,s.kt)("a",{parentName:"p",href:"https://turbowarp.org/editor?extension=https://extensions.turbowarp.org/fetch.js"},"https://turbowarp.org/editor?extension=https://extensions.turbowarp.org/fetch.js"),". Multiple extensions can be loaded by setting extension multiple times."),(0,s.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Projects that use custom extensions cannot be uploaded to the Scratch website. The project can only be loaded by a TurboWarp instance with the same extensions already loaded from the URL."))),(0,s.kt)("h2",{id:"introduction"},"Introduction to writing custom extensions"),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"This page assumes you are already familiar with JavaScript. If you don't already understand JavaScript, reading this page will not be an enjoyable experience."),(0,s.kt)("p",{parentName:"div"},"This page is still a work in progress. You're welcome and encouraged to suggest or even write improvements on GitHub."))),(0,s.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The example extension URLs found in this document should NOT be used in real projects. There is no guarantee they will continue to work in the future."))),(0,s.kt)("p",null,"Custom extensions run in a ",(0,s.kt)("a",{parentName:"p",href:"#sandbox"},"sandbox")," and have limited access to scratch internals. This is very limiting, but custom extensions can still access powerful APIs such as ",(0,s.kt)("inlineCode",{parentName:"p"},"fetch"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"WebSocket"),", and other web APIs."),(0,s.kt)("p",null,"Due to technical limitations of the sandbox, every call to a custom extension will stop the current script for a full frame, regardless of turbo mode or run without screen refresh."),(0,s.kt)("p",null,"Custom extensions need to be loaded from a website, for example GitHub Pages. For development, you may find it best to set up a local HTTP server. If you happen to have Python installed, that can be as easy as ",(0,s.kt)("inlineCode",{parentName:"p"},"python -m http.server"),"."),(0,s.kt)("h2",{id:"hello-world"},"Hello, world!"),(0,s.kt)("p",null,"The simplest custom extension looks something like this:"),(0,s.kt)(i.Z,{className:"language-js",title:"example.js",mdxType:"CodeBlock"},n(9045).Z),(0,s.kt)(m,{name:"example.js",mdxType:"ExampleExtensionLink"}),(0,s.kt)("p",null,"Save this in a file on your computer and use a local HTTP server to load it using the extension parameter. If you have a local HTTP server started with ",(0,s.kt)("inlineCode",{parentName:"p"},"python -m http.server"),", you might visit ",(0,s.kt)("a",{parentName:"p",href:"https://turbowarp.org/editor?extension=http://localhost:8000/example.js"},"https://turbowarp.org/editor?extension=http://localhost:8000/example.js"),'. The extension will add a new category that contains a single reporter block that outputs "Hello, world!"'),(0,s.kt)("h2",{id:"getInfo"},"getInfo"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"getInfo")," is a function that tells Scratch about your extension and what blocks it supports."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"id")," is a string that represents a unique ID that this extension uses. It should only contain the characters a-z and 0-9. The same extension should always use the same ID as changing it will break existing projects."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"name")," is a string that tells Scratch what name to display in the sidebar"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"blocks")," is a list of objects that defines which blocks your extension contains.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"opcode")," is the internal name of the block, and also corresponds to the method that will be called when the block is run. Opcodes should never be changed."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"blockType")," defines the type of block",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Scratch.BlockType.REPORTER")," makes a round reporter"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Scratch.BlockType.BOOLEAN")," makes a triangle shaped reporter that can fit into boolean inputs"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Scratch.BlockType.COMMAND")," makes a stacked block"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"text")," is a string that defines what the block will be named in the editor. Text in ","[","brackets","]"," will be converted to slots for arguments (see below examples)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"arguments")," is an object that defines the arguments that the block accepts. Each argument has:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"type")," which defines the input shape to make. Note that regardless of the type set here, the values actually passed to the block are not guaranteed to be casted to the right type. You should manually convert arguments to numbers, for example, as they will often be passed as strings.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Scratch.ArgumentType.STRING")," for string inputs"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Scratch.ArgumentType.NUMBER")," for number inputs"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Scratch.ArgumentType.BOOLEAN")," for boolean inputs (defaultValue is ignored)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Scratch.ArgumentType.ANGLE")," for angles"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Scratch.ArgumentType.COLOR")," for colors (#123abc string format)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Scratch.ArgumentType.MATRIX")," for a 5x5 matrix (passed in 11101010101... string format)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Scratch.ArgumentType.NOTE")," for music notes"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"defaultValue")," is the initial value when the block is created from the library"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"disableMonitor")," can be set to ",(0,s.kt)("inlineCode",{parentName:"li"},"true")," to force remove the checkbox by a block to create a monitor")))),(0,s.kt)("h2",{id:"strict-equality"},"A more complex example"),(0,s.kt)("p",null,"You probably didn't understand a word of the above. Here's a more thorough example that uses arguments:"),(0,s.kt)(i.Z,{className:"language-js",title:"strict-equality.js",mdxType:"CodeBlock"},n(9622).Z),(0,s.kt)(m,{name:"strict-equality.js",mdxType:"ExampleExtensionLink"}),(0,s.kt)("p",null,"Remember that you must reload to apply changes."),(0,s.kt)("h3",{id:"debugging"},"Debugging"),(0,s.kt)("p",null,"If for some reason the extension is not appearing, or if the page never finished loading, open up your developer console and search for errors. Chances are there's going to be something in there."),(0,s.kt)("p",null,"Aside from that, custom extensions are just JavaScript scripts. You can use ",(0,s.kt)("inlineCode",{parentName:"p"},"console.log")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"debugger")," as much as you'd like."),(0,s.kt)("h3",{id:"sandbox"},"Sandbox"),(0,s.kt)("p",null,'Custom extensions run in a sandbox that limits what they can access for security reasons. This "sandbox" is actually a sandboxed invisible ',(0,s.kt)("inlineCode",{parentName:"p"},"<iframe>")," (using the sandbox attribute) and a restricted feature policy. Note that this ",(0,s.kt)("a",{parentName:"p",href:"#scratch-changes"},"differs from regular Scratch"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Custom extensions cannot access VM internals"),(0,s.kt)("li",{parentName:"ul"},"Custom extensions cannot access any variable that wasn't explicitly passed in as an argument"),(0,s.kt)("li",{parentName:"ul"},"Custom extensions cannot directly interact with sprites at all"),(0,s.kt)("li",{parentName:"ul"},"Custom extensions CAN access most web APIs and open connections to servers (as long as CORS allows it)")),(0,s.kt)("h3",{id:"backwards-compatibility"},"Backwards Compatibility"),(0,s.kt)("p",null,"Extensions should strive to be as backwards compatible as possible. Notably, that means:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"NEVER change the extension ID"),(0,s.kt)("li",{parentName:"ul"},"NEVER remove blocks"),(0,s.kt)("li",{parentName:"ul"},"NEVER change opcodes"),(0,s.kt)("li",{parentName:"ul"},"NEVER significantly change behavior of blocks",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"That doesn't mean you can't change it slightly or fix bugs, but any valid call to your blocks should always do the same thing, in perpetuity"))),(0,s.kt)("li",{parentName:"ul"},"Extensively test your extension on existing projects")),(0,s.kt)("p",null,"Failing to follow these guidelines may effectively corrupt projects."),(0,s.kt)("h3",{id:"scratch-changes"},"Differences compared to Scratch"),(0,s.kt)("p",null,"TurboWarp's custom extensions have a few notable changes compared to custom extensions in Scratch or E\u7f8aicques."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"TurboWarp runs custom extensions in a sandboxed third-party ",(0,s.kt)("inlineCode",{parentName:"li"},"<iframe>")," while Scratch uses a first-party ",(0,s.kt)("inlineCode",{parentName:"li"},"Worker"),". This means the custom extension runs on a separate origin (it can't access turbowarp.org's indexedDB, for example), but it has access to more DOM APIs such as the Gamepad API.")),(0,s.kt)("h3",{id:"resources"},"Additional resources"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/LLK/scratch-vm/blob/develop/docs/extensions.md"},"Scratch extension documentation")," (Note: much of this is not relavent to custom/unofficial extensions)")))}k.isMDXComponent=!0},9045:(e,t,n)=>{n.d(t,{Z:()=>a});const a="// We use class syntax to define our extension object\n// This isn't actually necessary, but it tends to look the best\n\nclass MyExtension {\n  /**\n   * Scratch will call this method *once* when the extension loads.\n   * This method's job is to tell Scratch things like the extension's ID, name, and what blocks it supports.\n   */\n  getInfo() {\n    return {\n      // `id` is the internal ID of the extension\n      // It should never change!\n      // If you choose to make an actual extension, please change this to something else.\n      // Only the characters a-z and 0-9 can be used. No spaces or special characters.\n      id: 'myextensionexample',\n\n      // `name` is what the user sees in the toolbox\n      // It can be changed without breaking projects.\n      name: 'Cool Extension',\n\n      blocks: [\n        {\n          // `opcode` is the internal ID of the block\n          // It should never change!\n          // It corresponds to the class method with the same name.\n          opcode: 'hello',\n          blockType: Scratch.BlockType.REPORTER,\n          text: 'Hello, world!'\n        }\n      ]\n    };\n  }\n\n  /**\n   * Corresponds to `opcode: 'hello'` above\n   */\n  hello() {\n    // You can just return a value: any string, boolean, or number will work.\n    // If you have to perform an asynchronous action like a request, just return a Promise.\n    // The block will wait until the Promise resolves and return the resolved value.\n    return 'Hello, world!';\n  }\n}\n\n// Call Scratch.extensions.register to register your extension\n// Make sure to register each extension exactly once\nScratch.extensions.register(new MyExtension());\n"},9622:(e,t,n)=>{n.d(t,{Z:()=>a});const a="class StrictEqualityExtension {\n  getInfo() {\n    return {\n      id: 'strictequalityexample', // change this if you make an actual extension!\n      name: 'Strict Equality',\n      blocks: [\n        {\n          opcode: 'strictlyEquals',\n          blockType: Scratch.BlockType.BOOLEAN,\n          text: '[ONE] strictly equals [TWO]',\n          arguments: {\n            ONE: {\n              type: Scratch.ArgumentType.STRING,\n              defaultValue: 'First value'\n            },\n            TWO: {\n              type: Scratch.ArgumentType.STRING,\n              defaultValue: 'Second value'\n            }\n          }\n        }\n      ]\n    };\n  }\n  strictlyEquals(args) {\n    // Note strict equality: Inputs must match exactly: in type, case, etc.\n    return args.ONE === args.TWO;\n  }\n}\nScratch.extensions.register(new StrictEqualityExtension());\n"}}]);